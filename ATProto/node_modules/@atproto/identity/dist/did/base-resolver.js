"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseResolver = void 0;
const common_web_1 = require("@atproto/common-web");
const crypto = __importStar(require("@atproto/crypto"));
const errors_1 = require("../errors");
const types_1 = require("../types");
const atprotoData = __importStar(require("./atproto-data"));
class BaseResolver {
    constructor(cache) {
        Object.defineProperty(this, "cache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cache
        });
    }
    validateDidDoc(did, val) {
        if (!common_web_1.check.is(val, types_1.didDocument)) {
            throw new errors_1.PoorlyFormattedDidDocumentError(did, val);
        }
        if (val.id !== did) {
            throw new errors_1.PoorlyFormattedDidDocumentError(did, val);
        }
        return val;
    }
    async resolveNoCache(did) {
        const got = await this.resolveNoCheck(did);
        if (got === null)
            return null;
        return this.validateDidDoc(did, got);
    }
    async refreshCache(did, prevResult) {
        await this.cache?.refreshCache(did, () => this.resolveNoCache(did), prevResult);
    }
    async resolve(did, forceRefresh = false) {
        let fromCache = null;
        if (this.cache && !forceRefresh) {
            fromCache = await this.cache.checkCache(did);
            if (fromCache && !fromCache.expired) {
                if (fromCache?.stale) {
                    await this.refreshCache(did, fromCache);
                }
                return fromCache.doc;
            }
        }
        const got = await this.resolveNoCache(did);
        if (got === null) {
            await this.cache?.clearEntry(did);
            return null;
        }
        await this.cache?.cacheDid(did, got, fromCache ?? undefined);
        return got;
    }
    async ensureResolve(did, forceRefresh = false) {
        const result = await this.resolve(did, forceRefresh);
        if (result === null) {
            throw new errors_1.DidNotFoundError(did);
        }
        return result;
    }
    async resolveAtprotoData(did, forceRefresh = false) {
        const didDocument = await this.ensureResolve(did, forceRefresh);
        return atprotoData.ensureAtpDocument(didDocument);
    }
    async resolveAtprotoKey(did, forceRefresh = false) {
        if (did.startsWith('did:key:')) {
            return did;
        }
        else {
            const didDocument = await this.ensureResolve(did, forceRefresh);
            return atprotoData.ensureAtprotoKey(didDocument);
        }
    }
    async verifySignature(did, data, sig, forceRefresh = false) {
        const signingKey = await this.resolveAtprotoKey(did, forceRefresh);
        return crypto.verifySignature(signingKey, data, sig);
    }
}
exports.BaseResolver = BaseResolver;
//# sourceMappingURL=base-resolver.js.map