import { CID } from 'multiformats/cid';
import { BlockMap } from './block-map';
import { CarBlock } from './types';
export declare function writeCarStream(root: CID | null, blocks: AsyncIterable<CarBlock>): AsyncIterable<Uint8Array>;
export declare const blocksToCarFile: (root: CID | null, blocks: BlockMap) => Promise<Uint8Array>;
export declare const blocksToCarStream: (root: CID | null, blocks: BlockMap) => AsyncIterable<Uint8Array>;
export declare const readCar: (bytes: Uint8Array) => Promise<{
    roots: CID[];
    blocks: BlockMap;
}>;
export declare const readCarWithRoot: (bytes: Uint8Array) => Promise<{
    root: CID;
    blocks: BlockMap;
}>;
export type CarBlockIterable = AsyncGenerator<CarBlock, void, unknown> & {
    dump: () => Promise<void>;
};
export declare const readCarStream: (car: Iterable<Uint8Array> | AsyncIterable<Uint8Array>) => Promise<{
    roots: CID[];
    blocks: CarBlockIterable;
}>;
export declare function verifyIncomingCarBlocks(car: AsyncIterable<CarBlock>): AsyncIterable<CarBlock>;
//# sourceMappingURL=car.d.ts.map