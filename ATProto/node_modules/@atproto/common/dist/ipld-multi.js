"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.cborDecodeMulti = void 0;
const cborx = __importStar(require("cbor-x"));
const cid_1 = require("multiformats/cid");
// add extension for decoding CIDs
// decoding code taken from @ipld/dag-cbor
// does not support encoding cids
cborx.addExtension({
    Class: cid_1.CID,
    tag: 42,
    encode: () => {
        throw new Error('cannot encode cids');
    },
    decode: (bytes) => {
        if (bytes[0] !== 0) {
            throw new Error('Invalid CID for CBOR tag 42; expected leading 0x00');
        }
        return cid_1.CID.decode(bytes.subarray(1)); // ignore leading 0x00
    },
});
const decoder = new cborx.Decoder({
    // @ts-ignore
    int64AsNumber: true, // not in types for some reason
    useRecords: false,
});
const cborDecodeMulti = (encoded) => {
    const decoded = [];
    decoder.decodeMultiple(encoded, (value) => {
        decoded.push(value);
    });
    return decoded;
};
exports.cborDecodeMulti = cborDecodeMulti;
//# sourceMappingURL=ipld-multi.js.map