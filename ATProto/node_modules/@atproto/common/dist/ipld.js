"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerifyCidError = exports.VerifyCidTransform = exports.parseCidFromBytes = exports.sha256RawToCid = exports.sha256ToCid = exports.verifyCidForBytes = exports.cborBytesToRecord = exports.isValidCid = exports.cidForCbor = exports.dataToCborBlock = exports.cborDecode = exports.cborEncode = void 0;
const node_crypto_1 = require("node:crypto");
const node_stream_1 = require("node:stream");
const cborCodec = __importStar(require("@ipld/dag-cbor"));
const mf = __importStar(require("multiformats"));
const Block = __importStar(require("multiformats/block"));
const cid_1 = require("multiformats/cid");
const rawCodec = __importStar(require("multiformats/codecs/raw"));
const sha2_1 = require("multiformats/hashes/sha2");
const common_web_1 = require("@atproto/common-web");
exports.cborEncode = cborCodec.encode;
exports.cborDecode = cborCodec.decode;
const dataToCborBlock = async (data) => {
    return Block.encode({
        value: data,
        codec: cborCodec,
        hasher: sha2_1.sha256,
    });
};
exports.dataToCborBlock = dataToCborBlock;
const cidForCbor = async (data) => {
    const block = await (0, exports.dataToCborBlock)(data);
    return block.cid;
};
exports.cidForCbor = cidForCbor;
const isValidCid = async (cidStr) => {
    try {
        const parsed = cid_1.CID.parse(cidStr);
        return parsed.toString() === cidStr;
    }
    catch (err) {
        return false;
    }
};
exports.isValidCid = isValidCid;
const cborBytesToRecord = (bytes) => {
    const val = (0, exports.cborDecode)(bytes);
    if (!common_web_1.check.is(val, common_web_1.schema.map)) {
        throw new Error(`Expected object, got: ${val}`);
    }
    return val;
};
exports.cborBytesToRecord = cborBytesToRecord;
const verifyCidForBytes = async (cid, bytes) => {
    const digest = await sha2_1.sha256.digest(bytes);
    const expected = cid_1.CID.createV1(cid.code, digest);
    if (!cid.equals(expected)) {
        throw new Error(`Not a valid CID for bytes. Expected: ${expected.toString()} Got: ${cid.toString()}`);
    }
};
exports.verifyCidForBytes = verifyCidForBytes;
const sha256ToCid = (hash, codec) => {
    const digest = mf.digest.create(sha2_1.sha256.code, hash);
    return cid_1.CID.createV1(codec, digest);
};
exports.sha256ToCid = sha256ToCid;
const sha256RawToCid = (hash) => {
    return (0, exports.sha256ToCid)(hash, rawCodec.code);
};
exports.sha256RawToCid = sha256RawToCid;
// @NOTE: Only supports DASL CIDs
// https://dasl.ing/cid.html
const parseCidFromBytes = (cidBytes) => {
    const version = cidBytes[0];
    if (version !== 0x01) {
        throw new Error(`Unsupported CID version: ${version}`);
    }
    const codec = cidBytes[1];
    if (codec !== 0x55 && codec !== 0x71) {
        throw new Error(`Unsupported CID codec: ${codec}`);
    }
    const hashType = cidBytes[2];
    if (hashType !== 0x12) {
        throw new Error(`Unsupported CID hash function: ${hashType}`);
    }
    const hashLength = cidBytes[3];
    if (hashLength !== 32) {
        throw new Error(`Unexpected CID hash length: ${hashLength}`);
    }
    const rest = cidBytes.slice(4);
    return (0, exports.sha256ToCid)(rest, codec);
};
exports.parseCidFromBytes = parseCidFromBytes;
class VerifyCidTransform extends node_stream_1.Transform {
    constructor(cid) {
        const hasher = (0, node_crypto_1.createHash)('sha256');
        super({
            transform(chunk, encoding, callback) {
                hasher.update(chunk);
                callback(null, chunk);
            },
            flush(callback) {
                try {
                    const actual = (0, exports.sha256RawToCid)(hasher.digest());
                    if (actual.equals(cid)) {
                        return callback();
                    }
                    else {
                        return callback(new VerifyCidError(cid, actual));
                    }
                }
                catch (err) {
                    return callback(asError(err));
                }
            },
        });
        Object.defineProperty(this, "cid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cid
        });
    }
}
exports.VerifyCidTransform = VerifyCidTransform;
const asError = (err) => err instanceof Error ? err : new Error('Unexpected error', { cause: err });
class VerifyCidError extends Error {
    constructor(expected, actual) {
        super('Bad cid check');
        Object.defineProperty(this, "expected", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: expected
        });
        Object.defineProperty(this, "actual", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: actual
        });
    }
}
exports.VerifyCidError = VerifyCidError;
//# sourceMappingURL=ipld.js.map